package gui;

import java.awt.Toolkit;
import javax.swing.JOptionPane;
import napakalaki.CombatResult;
import napakalaki.Napakalaki;
import napakalaki.Player;

/**
 *
 * @author Carlos de al Torre
 */
public class NapakalakiView extends javax.swing.JFrame {

    /**
     * Este será el modelo de la aplicacion es donde están las funcionalidades
     * del programa
     */
    Napakalaki napakalakiModel;

    /**
     * Con esta función auxiliar conseguimos poner la interfaz con todos los
     * botones según corresponda en cada fase del juego.
     *
     * @param f será el numero que indica en que fase se encuentra el jugador.
     */
    private void setFase(int f) {
        switch (f) {
            case 1:
                // Equiparse, Descartarse, Descartarse de todo
                this.playerView.setFase(1);
                // Conocer Monstruo y Salir
                this.jBConocerMonstruo.setEnabled(true);
                this.jBDarseGolpes.setEnabled(false);
                this.jBSiguienteTurno.setEnabled(false);
                break;
            case 2:
                // Ninguno habilitado
                this.playerView.setFase(2);
                // Luchar o Salir
                this.jBConocerMonstruo.setEnabled(false);
                this.jBDarseGolpes.setEnabled(true);
                this.jBSiguienteTurno.setEnabled(false);
                break;
            case 3:
                // Descartarse, Descartarse de todo
                if (this.napakalakiModel.getCurrentPlayer().getPendingBadConsequence().isEmpty()) {
                    // si no tengo mal rollo pendiente muestro todos los botones del jugador
                    this.playerView.setFase(1);
                } else {
                    // y si tengo mal rollo pendiente solo muestro los de descartar
                    this.playerView.setFase(3);
                }
                // Siguiente turno y Salir
                this.jBConocerMonstruo.setEnabled(false);
                this.jBDarseGolpes.setEnabled(false);
                this.jBSiguienteTurno.setEnabled(true);
                break;
            case 4:
                // Ninguno habilitado
                this.playerView.setFase(2);
                // Solo Salir
                this.jBConocerMonstruo.setEnabled(false);
                this.jBDarseGolpes.setEnabled(false);
                this.jBSiguienteTurno.setEnabled(false);
                break;
        }
        repaint();
        revalidate();
    }

    /**
     * Creates new form NapakalakiView
     */
    public NapakalakiView() {
        initComponents();
        // Con esto conseguimos que siempre aparezca en el centro de la pantalla
        int ancho = (int) Toolkit.getDefaultToolkit().getScreenSize().getWidth() / 2 - this.getWidth() / 2;
        int alto = (int) Toolkit.getDefaultToolkit().getScreenSize().getHeight() / 2 - this.getHeight() / 2;
        setBounds(ancho, alto, this.getWidth(), this.getHeight());
        // oculto al principio de la creacion de la vista el monstruo
        this.mosterView.setVisible(false);
        new java.awt.GridLayout(alto, alto);
    }

    public void setNapakalaki(Napakalaki napa) {
        this.napakalakiModel = napa;
        this.playerView.setNapakalaki(napa);
        // si le pasamos el modelo podemos odbiar esta linea, puesto que el
        // modelo ya tiene cual es el jugador actual.
        //this.playerView.setPlayer(this.napakalakiModel.getCurrentPlayer());
        this.mosterView.setMonster(this.napakalakiModel.getCurrentMonster());
        this.setFase(1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jBConocerMonstruo = new javax.swing.JButton();
        jBDarseGolpes = new javax.swing.JButton();
        jBSiguienteTurno = new javax.swing.JButton();
        jBSalir = new javax.swing.JButton();
        jPEstadoCombate = new javax.swing.JPanel();
        jLResultadoCombate = new javax.swing.JLabel();
        mosterView = new gui.MosterView();
        playerView = new gui.PlayerView();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Juego Napakalaki");
        setMinimumSize(new java.awt.Dimension(1165, 680));
        setName("principal"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1165, 680));

        jBConocerMonstruo.setLabel("Conocer el Monstruo");
        jBConocerMonstruo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBConocerMonstruoActionPerformed(evt);
            }
        });

        jBDarseGolpes.setText("Darse Golpes");
        jBDarseGolpes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBDarseGolpesActionPerformed(evt);
            }
        });

        jBSiguienteTurno.setText("Siguiente Turno");
        jBSiguienteTurno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSiguienteTurnoActionPerformed(evt);
            }
        });

        jBSalir.setText("Salir");
        jBSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSalirActionPerformed(evt);
            }
        });

        jPEstadoCombate.setBorder(javax.swing.BorderFactory.createTitledBorder("Estado del Combate"));
        jPEstadoCombate.setPreferredSize(new java.awt.Dimension(400, 55));

        jLResultadoCombate.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLResultadoCombate.setText("Resultado del Combate");

        javax.swing.GroupLayout jPEstadoCombateLayout = new javax.swing.GroupLayout(jPEstadoCombate);
        jPEstadoCombate.setLayout(jPEstadoCombateLayout);
        jPEstadoCombateLayout.setHorizontalGroup(
            jPEstadoCombateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPEstadoCombateLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLResultadoCombate)
                .addContainerGap(875, Short.MAX_VALUE))
        );
        jPEstadoCombateLayout.setVerticalGroup(
            jPEstadoCombateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPEstadoCombateLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jLResultadoCombate)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jBConocerMonstruo)
                        .addGap(18, 18, 18)
                        .addComponent(jBDarseGolpes)
                        .addGap(18, 18, 18)
                        .addComponent(jBSiguienteTurno)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBSalir))
                    .addComponent(jPEstadoCombate, javax.swing.GroupLayout.PREFERRED_SIZE, 1131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(playerView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(mosterView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPEstadoCombate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(mosterView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playerView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBConocerMonstruo)
                    .addComponent(jBDarseGolpes)
                    .addComponent(jBSiguienteTurno)
                    .addComponent(jBSalir))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBConocerMonstruoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBConocerMonstruoActionPerformed
        // el monstruo esta en todo momento en la vista pero no visible
        this.mosterView.setVisible(true);
        // coloco los botones en el segundo estado (combatir o salir)
        this.setFase(2);
    }//GEN-LAST:event_jBConocerMonstruoActionPerformed

    private void jBDarseGolpesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBDarseGolpesActionPerformed
        // hago que el controlador realice los calculos de la lucha
        CombatResult aux = this.napakalakiModel.developCombat();
        // muestro el resultado del combate en la parte de la vista
        switch (aux) {
            case LOSE:
                this.jLResultadoCombate.setText("Has perdido el combate se siente...");
                break;
            case LOSEANDCONVERT:
                this.jLResultadoCombate.setText("Has perdido el combate, y te ha tocado 1 en el dado, te conviertes a Sectario");
                break;
            case WIN:
                this.jLResultadoCombate.setText("Bien... Has ganado el combate");
                break;
            case WINGAME:
                this.jLResultadoCombate.setText("Has ganado se acabo el juego.");
                break;
        }
        // vuelvo a setear el controlador a la vista después del combate
        this.setNapakalaki(this.napakalakiModel);
        // coloco los botones en el tercer estado.
        this.setFase(3);
        // compruebo si he llegado al final del juego
        if (this.napakalakiModel.endOfGame(aux)) {
            // coloco los botones en el cuarto estado (solo el salir habilitado)
            this.setFase(4);
            // lanzo un mensaje especial por terminar la partida
            JOptionPane.showMessageDialog(null, "Mi Enhorabuena usted a ganado el Juego.");
        }
    }//GEN-LAST:event_jBDarseGolpesActionPerformed

    private void jBSiguienteTurnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSiguienteTurnoActionPerformed
        // pongo aquí el pasar al siguiente turno
        if (this.napakalakiModel.nextTurn()) {
            // limpio el resultado anterior del combate
            this.jLResultadoCombate.setText("");
            // vuelvo a setear el controlador a la vista por que paso de turno
            this.setNapakalaki(this.napakalakiModel);
            // vuelvo a ocultar el monstruo por que paso de turno
            this.mosterView.setVisible(false);
            // coloco los botones en el primer estado.
            this.setFase(1);
        } else {
            /**
             * con esto queremos comprobar que solo se muestran 4 tesoros en el
             * panel de tesorosocultos y si hay mas se muestra por pantalla un
             * aviso; solo se hace con los ocultos por que, con el tipo de
             * cartas del juego nunca nos encontraremos con mas de 4 en los
             * visibles.
             */
            int num_tesoros_ocultos = this.napakalakiModel.getCurrentPlayer().getHiddenTreasures().size();
            if (num_tesoros_ocultos > Player.TESOROS_OCULTOS_MAXIMO) {
                num_tesoros_ocultos = num_tesoros_ocultos - Player.TESOROS_OCULTOS_MAXIMO;
                JOptionPane.showMessageDialog(null, "La cantidad de Tesoros ocultos "
                        + "es mayor de la\npermitida, por favor descartese de: " + num_tesoros_ocultos + " Tesoros Ocultos");
            } else {
                // lanzo un mensaje especial para que revise el mal rollo pendiente
                JOptionPane.showMessageDialog(null, "Por favor asegurece de haber\ncumplido el mal rollo pendiente");
            }
        }

    }//GEN-LAST:event_jBSiguienteTurnoActionPerformed

    private void jBSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSalirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jBSalirActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBConocerMonstruo;
    private javax.swing.JButton jBDarseGolpes;
    private javax.swing.JButton jBSalir;
    private javax.swing.JButton jBSiguienteTurno;
    private javax.swing.JLabel jLResultadoCombate;
    private javax.swing.JPanel jPEstadoCombate;
    private gui.MosterView mosterView;
    private gui.PlayerView playerView;
    // End of variables declaration//GEN-END:variables
}
